 Reversing a 32 bit signed intergers
#include <stdio.h>

int main() {
    int num = 12345;
    int reversed = 0;

    while (num > 0) {
        int rem = num % 2;
        reversed = reversed * 10 + rem;
        num = num / 2;
    }

    printf("Reverse of no. is %d\n", reversed);

    return 0;
}
Check for a valid String

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

static bool is_valid_Parentheses(char *s) {
    int n = 0, cap = 100;
    char *tstack = malloc(cap);
    while (*s != '\0') {
        switch (*s) {
            case '(':
            case '[':
            case '{':
                if (n + 1 >= cap) {
                    cap *= 2;
                    tstack = realloc(tstack, cap);
                }
                tstack[n++] = *s;
                break;
            case ')':
                if (tstack[--n] != '(') return false;
                break;
            case ']':
                if (tstack[--n] != '[') return false;
                break;
            case '}':
                if (tstack[--n] != '{') return false;
                break;
            default:
                return false;
        }
        s++;
    }
    return n == 0;
}

int main(void) {
    char *vbracket = "([)]";
    printf("%s\n", is_valid_Parentheses(vbracket) ? "true" : "false");
    return 0;
}
Merging two Arrays
#include <stdio.h>

int main() {
    int arr1, arr2, size1, size2, i, k, merge[100];

    printf("Enter Array 1 Size: ");
    scanf("%d", &size1);
    printf("Enter Array 1 Elements: ");
    for(i=0; i<size1; i++) {
        scanf("%d", &arr1[i]);
        merge[i] = arr1[i];
    }
    k = i;
 
    printf("\nEnter Array 2 Size: ");
    scanf("%d", &size2);
    printf("Enter Array 2 Elements: ");
    for(i=0; i<size2; i++) {
        scanf("%d", &arr2[i]);
        merge[k] = arr2[i];
        k++;
    }

    printf("\nThe new array after merging is:\n");
    for(i=0; i<k; i++) {
        printf("%d ", merge[i]);
    }

    return 0;
}
Given an array finding duplication values using c program
#include <stdio.h>

int main() {
    int n;
    scanf("%d", &n);
    int arr[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }
    int temp[n + 1];
    for (int i = 0; i <= n; i++) {
        temp[i] = 0;
    }
    for (int i = 0; i < n; i++) {
        temp[arr[i]]++;
    }
    for (int i = 1; i <= n; i++) {
        if (temp[i] > 1) {
            printf("%d ", i);
        }
    }
    return 0;
}
 Merging of  list
#include <stdio.h>

void mergeLists(int list1[], int list2[], int n1, int n2, int result[]) {
    int i = 0, j = 0, k = 0;

    // Merge smaller elements first
    while (i < n1 && j < n2) {
        if (list1[i] < list2[j]) {
            result[k++] = list1[i++];
        } else {
            result[k++] = list2[j++];
        }
    }

    // If there are remaining elements in list1, append them
    while (i < n1) {
        result[k++] = list1[i++];
    }

    // If there are remaining elements in list2, append them
    while (j < n2) {
        result[k++] = list2[j++];
    }
}

int main() {
    int list1[] = {1, 3, 5, 7};
    int list2[] = {2, 4, 6, 8};
    int n1 = sizeof(list1) / sizeof(list1[0]);
    int n2 = sizeof(list2) / sizeof(list2[0]);
    int result[n1 + n2];

    mergeLists(list1, list2, n1, n2, result);

    printf("Merged List: ");
    for (int i = 0; i < n1 + n2; i++) {
        printf("%d ", result[i]);
    }
    printf("\n");

    return 0;
}
 Given array of reg nos need to search for particular reg no
#include <stdio.h>

int main() {
    int n, i, search, flag = 0;
    int arr[100];

    printf("Enter the number of elements in array: ");
    scanf("%d", &n);

    printf("Enter %d integers:\n", n);
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Enter the registration number to search: ");
    scanf("%d", &search);

    for (i = 0; i < n; i++) {
        if (arr[i] == search) {
            printf("Registration number found at position: %d\n", i + 1);
            flag = 1;
            break;
        }
    }

    if (flag == 0) {
        printf("Registration number not found in the array.\n");
    }

    return 0;
}
 Identify location of element in given array
#include <stdio.h>

int main() {
    int arr[] = {34, 2, 23, 100, 60};
    int key = 100;
    int i, flag = 0;

    printf("Enter element to search\n");
    scanf("%d", &key);

    for (i = 0; i < sizeof(arr) / sizeof(arr[0]); i++) {
        if (arr[i] == key) {
            flag = 1;
            break;
        }
    }

    if (flag == 1)
        printf("Search Found\n");
    else
        printf("Search Not Found\n");

    return 0;
}
Given array print odd and even values
#include <stdio.h>

int main() {
    int n;
    printf("Enter number of elements in the array: ");
    scanf("%d", &n);

    int arr[n];

    printf("Enter %d elements in the array: ", n);
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Even numbers in the array are: ");
    for (int i = 0; i < n; i++) {
        if (arr[i] % 2 == 0) {
            printf("%d ", arr[i]);
        }
    }
    printf("\n");

    printf("Odd numbers in the array are: ");
    for (int i = 0; i < n; i++) {
        if (arr[i] % 2 != 0) {
            printf("%d ", arr[i]);
        }
    }
    printf("\n");

    return 0;
}
.sum of Fibonacci Series
#include <stdio.h>

int main() {
    int n, i, t1 = 0, t2 = 1, nextTerm, sum = 0;

    printf("Enter the number of terms: ");
    scanf("%d", &n);

    printf("Fibonacci Series: ");

    for (i = 1; i <= n; ++i) {
        printf("%d, ", t1);
        sum += t1;
        nextTerm = t1 + t2;
        t1 = t2;
        t2 = nextTerm;
    }

    printf("\nSum of the Fibonacci series up to %d terms: %d", n, sum);

    return 0;
}
Finding factorial of a number
#include <stdio.h>

int main() {
    int n, fact = 1;
    printf("Enter a number to find factorial: ");
    scanf("%d", &n);

    for (int i = 1; i <= n; i++) {
        fact *= i;
    }

    printf("Factorial of %d is: %d", n, fact);
    return 0;
}
